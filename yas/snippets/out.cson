  "-- -> /******************":
    prefix: "--"
    body: """/**
 * @module `(file-name-sans-extension (buffer-name))`
 *
 * @description
 * $1
 *
 * @example
 * var mod = require('`(file-name-sans-extension (buffer-name))`');
 */
$0"""
  "arr -> Array.isArray($0)":
    prefix: "arr"
    body: """Array.isArray($0)"""
  "att : Accessor for attribute.":
    prefix: undefined
    body: """/**
 * Accessor for attribute $1.
 */
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype.$1 = function(v) {
    if (typeof v === 'undefined') return this._$1;
    this._$1 = v;
    return this;
};$0
"""
  "var $1 = $_parseArg(arg_$1);":
    prefix: "arg"
    body: """var ${1:args} = Array.prototype.slice.call( arguments );$0"""
  "$$(\"tfw.widget.Button\", ...)":
    prefix: "btn"
    body: """new Button({ text: $1 })$0
"""
  "dom: New class.":
    prefix: "dom"
    body: """"use strict";

var $ = require("dom");
var DB = require("tfw.data-binding");

/**
 * @class `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`
 *
 * @param {boolean} opts.visible - Set the visiblity of the component.
 *
 * @example
 * var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = require("`(file-name-sans-extension (buffer-name))`");
 * var instance = new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`({visible: false});
 */
var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = function(opts) {
    var elem = $.elem( this, 'div' );
    $0
    DB.propRemoveClass( this, 'visible', 'hide' );

    opts = DB.extend({
         visible: true
    }, opts, this);
};


module.exports = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;"""
  "typ -> typeof {} === '{}'":
    prefix: undefined
    body: """typeof $1 === '${2:undefined}'$0"""
  "describe('should...', function() {...})":
    prefix: "des"
    body: """describe('${1:should }$2', function($3) {
    $0
});"""
  "New Toloframework component":
    prefix: "com"
    body: """/**
 * Component ${1:x-my-component}
 */

exports.tags = ["$1"];
exports.priority = 0;

/**
 * Compile a node of the HTML tree.
 */
exports.compile = function(root, libs) {
$0
};
"""
  "console.error();":
    prefix: "err"
    body: """console.error(${1:err});$0"""
  "export":
    prefix: "export"
    body: """/**
 * ${5:$1}
 * @param {${3:string}} $2 - $4.
 */
module.exports.$1 = function($2) {
$0
};

"""
  "fora -> for (i=0 ; i<arguments.length ; ...":
    prefix: "fora"
    body: """Array.slice.call(arguments).forEach(function(arg, idx) {
$0                                                  
});"""
  "ext":
    prefix: "ext"
    body: """// Inheritance from ${1:Widget}
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype = Object.create(${1:Widget}.prototype);
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype.constructor = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;
"""
  "forap -> var args = []; for (i=0 ; i<arguments.length ; ...":
    prefix: undefined
    body: """var ${1:i}, ${2:args} = [];
for ($1 = ${3:0} ; $1 < arguments.length ; $1++) $2.push(arguments[$1]);$0"""
  "fore -> Array.forEach(...)":
    prefix: "fore"
    body: """$1.forEach(function (${2:itm, idx, arr}) {
$0
});
"""
  "frm : All required modules for Forms.":
    prefix: undefined
    body: """var B = require("tp4.button").create;
var E = require("tp4.error").create;
var I = require("tp4.input").create;
var W = require("tp4.wait").create;
var LR = require("tfw.layout-row").create;
var Widget = require("wdg");

function H(caption) { return B(caption).addClass("simple"); }
function P(html) { return Widget.tag("p").html(html); }
function BR() { return Widget.tag("br"); }
$0
"""
  "fori -> for (i=0 ; i<toto.length ; i++) ...":
    prefix: "fori"
    body: """for( ${1:i} = 0 ; $1 < $2.length ; $1++ ) {
var ${3:item} = $2[$1];$0
}
"""
  "fork --> for( key in toto ) ...":
    prefix: "fork"
    body: """for( ${1:key} in $2 ) {
${3:val} = $2[$1];$0
}
"""
  "function( ... ) {}":
    prefix: "fun"
    body: """function$1($2) {
    $0
}"""
  "defineProperty read only":
    prefix: "get"
    body: """Object.defineProperty( this, '${1:element}', {
value: ${2:$.div()}, 
writable: false, configurable: false, enumerable: true
});$0"""
  "function( ... ) {}":
    prefix: "fun"
    body: """<<<<<<< HEAD:yas/snippets/text-mode/js2-mode/fun.yasnippet
function $1($2) {
=======
function$1($2) {
>>>>>>> a8e4324edb7fc2a2bfc13729a0b80162f8f8c197:yas/snippets/js2-mode/fun.yasnippet
    $0
}"""
  "defineProperty":
    prefix: "getset"
    body: """${2:Object}.defineProperty( `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype, '${1:value}', {
get: function() { return this._$1; },
set: function(v) { this._$1 = v; },
configurable: true, enumerable: true
});$0"""
  "if(  ) {}":
    prefix: "if"
    body: """if( $1 ) {
$0
}"""
  "it('should...', function() {...})":
    prefix: "it"
    body: """it('$1', function($2) {
    $0
});
"""
  "if( typeof {} === '{}' )":
    prefix: "iftyp"
    body: """if( typeof $1 ${2:=}== '${3:undefined}' ) $0"""
  "mod: Module for require().":
    prefix: "mod"
    body: """/**
 * @example
 * var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = require("`(file-name-sans-extension (buffer-name))`");
 * var instance = new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
 * @class `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`
 */
var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = function($1) {
    $0
};


`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.create = function($1) {
return new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
};
module.exports = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;"""
  "console.log();":
    prefix: "log"
    body: """console.log($0);"""
  "modreq --> NodeJS modules without Toloframework.":
    prefix: undefined
    body: """require( '`(file-name-sans-extension (buffer-name))`', function( exports, module ) {
"use strict";

var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = function($1) {
    $0
};

module.exports = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;
});"""
  "modwdg: Inherit frokm Widget.":
    prefix: undefined
    body: """"use strict";
var Widget = require("wdg");

/**
 * @example
 * var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = require("`(file-name-sans-extension (buffer-name))`");
 * var instance = new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
 * @class `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`
 */
var `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")` = function($1) {
    Widget.call(this);
    this.addClass("`(mapconcat 'identity (split-string (file-name-sans-extension (buffer-name)) "\\\\.") "-")`");
    $0
};

// Extension of Widget.
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype = Object.create(Widget.prototype);
`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.prototype.constructor = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;

// TODO: put your prototypes here...


`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`.create = function($1) {
return new `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`($1);
};
module.exports = `(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`;"""
  "new Promise(...)":
    prefix: "pro"
    body: """new Promise(function(resolve, reject) {
    $0
});"""
  "{\"name\": \"ZANOLLA Jules\", \"days\": \"M\"},":
    prefix: "par"
    body: """{"name": "$1", "days": "${2:LMJV}", "mail": "$3", "exclude": [$4]},$0"""
  "Toto.prototype.method = function()":
    prefix: "proto"
    body: """/**
 * @member ${1:`(mapconcat 'identity (mapcar 'capitalize (split-string (car (last (split-string (file-name-sans-extension (buffer-name)) "\\\\."))) "-")) "")`}.$2
 * @param $3
 */
$1.prototype.$2 = function($3) {
    $0
};
"""
  "req":
    prefix: "req"
    body: """var ${3:${1:$(camelize yas-text)}} = require("${1:fs}")$2;$0"""
  "return new Promise(...)":
    prefix: "retpro"
    body: """return new Promise(function (resolve, reject) {
    $0
});"""
  "Accessor pour un attribut.":
    prefix: "set"
    body: """        /**
	 * Accessor for ${1:name}.
	 */
	$1: function(v) {
	    if (v === undefined) return this._$1;
	    this._$1 = v;
	    return this;
	}$0
"""
  "Ajout d'un SideWidget dans Trail-Passion.":
    prefix: undefined
    body: """/**
 * <Title>`(file-name-sans-extension (buffer-name))`</Title>
 * <Var id="created">`(format-time-string "%d/%m/%Y")`</Var>
 *
 */
{
    superclass: "tp3.SideWidget",
    singleton: true,
 
    init: function() {
        $0        
    },

    functions: {
        title: function() {
            return "$1";
        },
        
        onShow: function(arg) {
            $0
        },
        
        onHide: function() {
            return true;
        },
        
        action: function(key, data) {
            switch(key) {
            case "":
                
                break;
            }
        }
    }
}
"""
  "Tap -> Tap(function(){})":
    prefix: "tap"
    body: """Tap(
  function() {
    $0
  }
)"""
  "Squelette d'une class ToloFrameWork.":
    prefix: undefined
    body: """/**
 * @namespace `(file-name-sans-extension (buffer-name))`
 * @created `(format-time-string "%d/%m/%Y")`
 *
 * @class `(file-name-sans-extension (buffer-name))`
 */
window["TFW::`(file-name-sans-extension (buffer-name))`"] = {
	superclass: ${1:null},
        singleton: ${2:false},
        attributes: {},
        classInit: function(vars) {},
	signals: [""],
        //=====================
	init: function() {$3},	

	functions: {
	      $0
	}
};
"""
  "Migrer depuis TFW1 vers TFW2.":
    prefix: undefined
    body: """window["TFW::`(file-name-sans-extension (buffer-name))`"] = """
  "$$.trace();":
    prefix: "tr"
    body: """console.info("[`(file-name-sans-extension (buffer-name))`] $0$1=", $1);"""
  "var that = this;":
    prefix: "that"
    body: """var that = this;
$0"""
  "try {} catch(e) {}":
    prefix: "try"
    body: """try {
   $0
}
catch (e) {
   console.error("[${1:`(buffer-name)`}:$2]", e);
   throw(Error("[${1:`(buffer-name)`}:$2]\n" + e));
}
"""
  "typ -> typeof {} === '{}'":
    prefix: "typ"
    body: """typeof $1 ${2:=}== '${3:undefined}'$0"""
  "if( toto === undefined ) toto = \"blabla\";":
    prefix: "undef"
    body: """if( typeof $1 === 'undefined' ) $1 = $2;
$0"""
  "use":
    prefix: "use"
    body: """"use strict";
$0"""
  "wdg":
    prefix: undefined
    body: """/**
 *
 * @module $1
 */


/**
 * $0
 * @example
 * <w:$1></w:$1>
 */
exports.compile = function(root) {
    this.Tree.keepOnlyTagChildren(root);
};"""
  "_('intl')":
    prefix: "_"
    body: """_('$1')$0"""
